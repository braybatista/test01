import com.github.jk1.license.render.*
import com.github.jk1.license.importer.*
import com.github.jk1.license.filter.*

plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.2'
	id 'io.spring.dependency-management' version '1.1.2'
	id 'com.github.jk1.dependency-license-report' version "2.5"
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
//	sourceCompatibility = '17'
}

licenseReport {
    // By default this plugin will collect the union of all licenses from
    // the immediate pom and the parent poms. If your legal team thinks this
    // is too liberal, you can restrict collected licenses to only include the
    // those found in the immediate pom file
    // Defaults to: true
    unionParentPomLicenses = false

    // Set output directory for the report data.
    // Defaults to ${project.buildDir}/reports/dependency-license.
    outputDir = "$projectDir/target/generated-resources"

    // Don't include artifacts of project's own group into the report
    excludeOwnGroup = true

    // Don't exclude bom dependencies.
    // If set to true, then all boms will be excluded from the report
    excludeBoms = false

    // List the groups ids to exclude from dependency report. Supports regular expressions.
    // For finer granularity, see: excludes.
    excludeGroups = ['org.springframework', 'org.springframework.boot']

    // Set custom report renderer, implementing ReportRenderer.
    // Yes, you can write your own to support any format necessary.
    renderers = [new XmlReportRenderer('licenses.xml', 'Back-End Libraries')]

}

configurations {
	implementation {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	implementation group: 'com.itextpdf', name: 'itextpdf', version: '5.5.13.3'
    implementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.10.0'
    implementation group: 'junit', name: 'junit', version: '4.13.2'
    implementation group: 'org.mockito', name: 'mockito-core', version: '5.5.0'
    implementation group: 'com.google.guava', name: 'guava', version: '32.1.2-jre'
    implementation group: 'org.scala-lang', name: 'scala3-library_3', version: '3.4.0-RC1-bin-20230822-3783220-NIGHTLY'
    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.11'
    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.13.0'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.4.11'
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.28'
    implementation group: 'commons-io', name: 'commons-io', version: '2.13.0'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'
    implementation group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'
    implementation group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'
    implementation group: 'com.h2database', name: 'h2', version: '2.2.220'
    implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
    implementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: '5.10.0'
    implementation group: 'org.javassist', name: 'javassist', version: '3.29.2-GA'
    implementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

tasks.named('test') {
	useJUnitPlatform()
}
